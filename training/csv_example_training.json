{"distinct": [{"__class__": "tuple", "__value__": [{"id": 693, "title": "ur_gazebo depends on gazebo_ros_pkgs meta-package", "type": "weakness", "description": "The ur_gazebo package, which is a proper package depends on a meta-package (just a grouping package) gazebo_ros_pkgs, which is not allowed by ROS packaging standards.  Instead it should depend on concrete packages that it actually uses.  See REP-127 linked below; \"Catkin packages must depend directly on the packages they use, not on any metapackages.\" (section <metapackage/>). This causes the build error with the current version of catkin that enforces this rule. The bug is fixed by removing the runtime dependency on gazebo_ros_pkgs and replacing it with a dependency on controller_manager, which seems tot be the actual package needed. Meta-packages in ROS are used to install a number of packages working together (and having actual contents) to be conveniently installed together, while tracking all dependencies.  They cannot export dependencies further, so they should only be used to install groups of packages together by a package manager, not by other packages to depend on them. The issue is ROS-specific as it appears in ROS-specific package.xml files.  Moreover it arises due to the enforcement of a ROS-specific packaging decision.\n", "cwe": "run-time dependency issue (no CWE)\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["meta-package", "catkin"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://www.ros.org/reps/rep-0127.html", "https://github.com/catkin/catkin_tools/issues/370#issuecomment-219157118", "https://github.com/aliasrobotics/RVD/issues/693"], "flaw_phase": "build-time", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/ur_gazebo", "flaw_languages": ["package.xml"], "flaw_date-detected": "", "flaw_detected-by": "build system", "flaw_detected-by-method": "N/A", "flaw_date-reported": "unreported", "flaw_reported-by": "unreported", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/693", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/255"}, {"id": 631, "title": "component not correctly initialized at activation", "type": "weakness", "description": "A robot is providing an interface for pose-based control, i.e., it is ready to receive 6d pose request to move the robot.  Among the different ways to produce the pose target, the one of interest is deduced from user input provided by a joystick interface.  This component reads at launch the current pose of the robot, and waits then for joystick input to produce some motion requests. But if the robot is moved through other means, the joystick-based pose commands does not get the current robot pose updated. It is indeed only set at the component creation.  Thus, when the joystick-based pose generator is activated and receive joystick input, the target pose updated may be based on an old pose of the robot end effector, so that the robot will move back to a previous (and potentially far) pose.\n", "cwe": "Dangerous behavior: wrong position from joystick (no CWE) #PHYSICAL", "cve": "None", "keywords": ["driver", "joystick", "node life-cycle"], "system": "shadow-robot", "vendor": null, "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://github.com/aliasrobotics/RVD/issues/631"], "flaw_phase": "runtime-operation", "flaw_specificity": "robotic-specific or general issue", "flaw_architectural-location": "application-specific code", "flaw_application": "arm control", "flaw_subsystem": "driver | controller # (component getting joystick motion and deducing the desired 6D motion of the arm end effector)", "flaw_package": "shadow_robot/stiff_flop/sf_teleop/", "flaw_languages": "None", "flaw_date-detected": "", "flaw_detected-by": "user", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2015-12-04 (00:00)", "flaw_reported-by": "member developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/631", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/shadow-robot/stiff_flop/issues/276"}]}, {"__class__": "tuple", "__value__": [{"id": 640, "title": "Missing dependencies to an external library", "type": "weakness", "description": "The file package.xml is essential for every ROS package and it contains among others the dependencies of the packages.  In this example the dependency on \"pynotify\" is missing in the rosdep list and thus, there is an error by installing the package from apt-get install.  This could be solved by removing the dependencies inside the python script, which was using the library, since it was not required anymore. Otherwise, one would have needed to add the dependency to the package.xml.\n", "cwe": "Missing Dependency (no CWE)", "cve": "None", "keywords": ["missing", "dependencies", "library", "package.xml"], "system": "care-o-bot", "vendor": null, "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://wiki.ros.org/catkin/package.xml", "https://github.com/aliasrobotics/RVD/issues/640"], "flaw_phase": "deployment-time", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "application-specific", "flaw_application": "N/A", "flaw_subsystem": "specific application component", "flaw_package": "cob_command_gui", "flaw_languages": "None", "flaw_date-detected": "", "flaw_detected-by": "developer", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2015-01-14 (15:17)", "flaw_reported-by": "developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/640", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ipa320/cob_command_tools/pull/84"}, {"id": 631, "title": "component not correctly initialized at activation", "type": "weakness", "description": "A robot is providing an interface for pose-based control, i.e., it is ready to receive 6d pose request to move the robot.  Among the different ways to produce the pose target, the one of interest is deduced from user input provided by a joystick interface.  This component reads at launch the current pose of the robot, and waits then for joystick input to produce some motion requests. But if the robot is moved through other means, the joystick-based pose commands does not get the current robot pose updated. It is indeed only set at the component creation.  Thus, when the joystick-based pose generator is activated and receive joystick input, the target pose updated may be based on an old pose of the robot end effector, so that the robot will move back to a previous (and potentially far) pose.\n", "cwe": "Dangerous behavior: wrong position from joystick (no CWE) #PHYSICAL", "cve": "None", "keywords": ["driver", "joystick", "node life-cycle"], "system": "shadow-robot", "vendor": null, "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://github.com/aliasrobotics/RVD/issues/631"], "flaw_phase": "runtime-operation", "flaw_specificity": "robotic-specific or general issue", "flaw_architectural-location": "application-specific code", "flaw_application": "arm control", "flaw_subsystem": "driver | controller # (component getting joystick motion and deducing the desired 6D motion of the arm end effector)", "flaw_package": "shadow_robot/stiff_flop/sf_teleop/", "flaw_languages": "None", "flaw_date-detected": "", "flaw_detected-by": "user", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2015-12-04 (00:00)", "flaw_reported-by": "member developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/631", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/shadow-robot/stiff_flop/issues/276"}]}, {"__class__": "tuple", "__value__": [{"id": 631, "title": "component not correctly initialized at activation", "type": "weakness", "description": "A robot is providing an interface for pose-based control, i.e., it is ready to receive 6d pose request to move the robot.  Among the different ways to produce the pose target, the one of interest is deduced from user input provided by a joystick interface.  This component reads at launch the current pose of the robot, and waits then for joystick input to produce some motion requests. But if the robot is moved through other means, the joystick-based pose commands does not get the current robot pose updated. It is indeed only set at the component creation.  Thus, when the joystick-based pose generator is activated and receive joystick input, the target pose updated may be based on an old pose of the robot end effector, so that the robot will move back to a previous (and potentially far) pose.\n", "cwe": "Dangerous behavior: wrong position from joystick (no CWE) #PHYSICAL", "cve": "None", "keywords": ["driver", "joystick", "node life-cycle"], "system": "shadow-robot", "vendor": null, "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://github.com/aliasrobotics/RVD/issues/631"], "flaw_phase": "runtime-operation", "flaw_specificity": "robotic-specific or general issue", "flaw_architectural-location": "application-specific code", "flaw_application": "arm control", "flaw_subsystem": "driver | controller # (component getting joystick motion and deducing the desired 6D motion of the arm end effector)", "flaw_package": "shadow_robot/stiff_flop/sf_teleop/", "flaw_languages": "None", "flaw_date-detected": "", "flaw_detected-by": "user", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2015-12-04 (00:00)", "flaw_reported-by": "member developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/631", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/shadow-robot/stiff_flop/issues/276"}, {"id": 624, "title": "Incorrect handling of network communication failure", "type": "weakness", "description": "The POCO C++ libraries that are utilized (for interacting with Robot Web Services (RWS) from ABB Robotics) requires that the communication streams are reset, if an error has occurred on the network. E.g. if the RWS server has been terminated unexpectedly. If the streams are not reset, then it is not possible to reuse them.\n", "cwe": "CWE-664: Improper Control of a Resource Through its Lifetime #RESOURCE internal classification (cause): reset not called after network failure internal classification (effect): not possible to reuse network connections\n", "cve": "None", "keywords": ["network", "communication", "RWS", "POCO"], "system": "confidential", "vendor": null, "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://developercenter.robotstudio.com/webservice/api_reference", "https://pocoproject.org/", "https://github.com/aliasrobotics/RVD/issues/624"], "flaw_phase": "runtime-operation", "flaw_specificity": "application specific", "flaw_architectural-location": "N/A", "flaw_application": "RWS interface", "flaw_subsystem": "driver", "flaw_package": "N/A", "flaw_languages": "None", "flaw_date-detected": "", "flaw_detected-by": "developer", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2017-05-03 (14:36)", "flaw_reported-by": "member developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/624", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": ""}]}, {"__class__": "tuple", "__value__": [{"id": 710, "title": "Missing runtime dependency on another package (industrial robot simulator)", "type": "weakness", "description": "The universal robot planner (moveit) module lacks a runtime dependency on the industrial robot simulator.  This leads to a runtime error (presumably). This bug has been repeated in multiple drivers. All industrial moveit_config packages use the industrial_robot_simulator, but don't declare a runtime dependency on it.  Affected robots include ABB, Fanuc, Motoman, Universal Robot.\n", "cwe": "run-time dependency issue (no CWE)\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["package.xml"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://wiki.ros.org/industrial_robot_simulator", "https://github.com/aliasrobotics/RVD/issues/710"], "flaw_phase": "runtime-initialization", "flaw_specificity": "ROS", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/ur5_moveit_config/", "flaw_languages": ["Python"], "flaw_date-detected": "", "flaw_detected-by": "runtime detection", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2014-02-10 (12:19)", "flaw_reported-by": "member developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/710", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/42"}, {"id": 683, "title": "dependency on ros_controllers metapackage", "type": "weakness", "description": "The ur_gazebo package, which is a proper package, depends on a meta-package (just a grouping package) ros_controllers, which is not allowed by ROS packaging standards.  Instead they should depend on concrete packages that they actually use.  See REP-127 linked below; \"Catkin packages must depend directly on the packages they use, not on any metapackages.\" (section <metapackage/>). This causes the build error with the current version of catkin that enforces this rule. This dependency is (moreover) stale, and can simply be removed. Meta-packages in ROS are used to install a number of packages working together (and having actual contents) to be conveniently installed together, while tracking all dependencies.  They cannot export dependencies further, so they should only be used to install groups of packages together by a package manager, not by other packages to depend on them. The issue is ROS-specific as it appears in ROS-specific package.xml files.  Moreover it arises due to the enforcement of a ROS-specific packaging decision. This essentially the same bug as 0c34123 and a58f4b5\n", "cwe": "run-time dependency issue (no CWE)\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["meta-package, catkin"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://www.ros.org/reps/rep-0127.html | https://github.com/catkin/catkin_tools/issues/370#issuecomment-219157118", "https://github.com/aliasrobotics/RVD/issues/683"], "flaw_phase": "build-time", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/ur_gazebo", "flaw_languages": ["package.xml"], "flaw_date-detected": "", "flaw_detected-by": "build system", "flaw_detected-by-method": "N/A", "flaw_date-reported": "unreported", "flaw_reported-by": "unreported", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/683", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/289"}]}, {"__class__": "tuple", "__value__": [{"id": 718, "title": "ur_gazebo depends on gazebo_ros_pkgs meta-package", "type": "weakness", "description": "The ur_gazebo package, which is a proper package depends on a meta-package (just a grouping package) gazebo_ros_pkgs, which is not allowed by ROS packaging standards.  Instead it should depend on concrete packages that it actually uses.  See REP-127 linked below; \"Catkin packages must depend directly on the packages they use, not on any metapackages.\" (section <metapackage/>). This causes the build error with the current version of catkin that enforces this rule. The bug is fixed by removing the runtime dependency on gazebo_ros_pkgs and replacing it with a dependency on controller_manager, which seems tot be the actual package needed. Meta-packages in ROS are used to install a number of packages working together (and having actual contents) to be conveniently installed together, while tracking all dependencies.  They cannot export dependencies further, so they should only be used to install groups of packages together by a package manager, not by other packages to depend on them. The issue is ROS-specific as it appears in ROS-specific package.xml files.  Moreover it arises due to the enforcement of a ROS-specific packaging decision.\n", "cwe": "run-time dependency issue (no CWE)\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["meta-package", "catkin"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://www.ros.org/reps/rep-0127.html", "https://github.com/catkin/catkin_tools/issues/370#issuecomment-219157118", "https://github.com/aliasrobotics/RVD/issues/718"], "flaw_phase": "build-time", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/ur_gazebo", "flaw_languages": ["package.xml"], "flaw_date-detected": "", "flaw_detected-by": "build system", "flaw_detected-by-method": "N/A", "flaw_date-reported": "unreported", "flaw_reported-by": "unreported", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/718", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/255"}, {"id": 683, "title": "dependency on ros_controllers metapackage", "type": "weakness", "description": "The ur_gazebo package, which is a proper package, depends on a meta-package (just a grouping package) ros_controllers, which is not allowed by ROS packaging standards.  Instead they should depend on concrete packages that they actually use.  See REP-127 linked below; \"Catkin packages must depend directly on the packages they use, not on any metapackages.\" (section <metapackage/>). This causes the build error with the current version of catkin that enforces this rule. This dependency is (moreover) stale, and can simply be removed. Meta-packages in ROS are used to install a number of packages working together (and having actual contents) to be conveniently installed together, while tracking all dependencies.  They cannot export dependencies further, so they should only be used to install groups of packages together by a package manager, not by other packages to depend on them. The issue is ROS-specific as it appears in ROS-specific package.xml files.  Moreover it arises due to the enforcement of a ROS-specific packaging decision. This essentially the same bug as 0c34123 and a58f4b5\n", "cwe": "run-time dependency issue (no CWE)\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["meta-package, catkin"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://www.ros.org/reps/rep-0127.html | https://github.com/catkin/catkin_tools/issues/370#issuecomment-219157118", "https://github.com/aliasrobotics/RVD/issues/683"], "flaw_phase": "build-time", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/ur_gazebo", "flaw_languages": ["package.xml"], "flaw_date-detected": "", "flaw_detected-by": "build system", "flaw_detected-by-method": "N/A", "flaw_date-reported": "unreported", "flaw_reported-by": "unreported", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/683", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/289"}]}, {"__class__": "tuple", "__value__": [{"id": 707, "title": "Missing Runtime Dependency on MoveIt config", "type": "weakness", "description": "The universal_robot package misses a runtime dependency in the manifest file package.xml.  This has prevented the driver to pass continuous integration tests.\n", "cwe": "Run-time dependency issue (no CWE)\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["dependencies", "runtime", "launch", "package.xml"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://github.com/aliasrobotics/RVD/issues/707"], "flaw_phase": "runtime-initialization", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform-code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/package.xml", "flaw_languages": "(presumably) python", "flaw_date-detected": "", "flaw_detected-by": "runtime crash", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2014-03-31 (15:19)", "flaw_reported-by": "contributor", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/707", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/53"}, {"id": 692, "title": "Missing runtime dependency on message definitions", "type": "weakness", "description": "ROS uses channels (known as 'topics') for communication.  Each topic is typed by a format of the messages it can carry. Messages are defined in a .msg file (.msg is essentially a super simple data-definition-langage (DDL)).  Implementations of messages are generated from msg files at compile time and then used at runtime to serialize and deserialize messages for communication. Meta-packages in ROS are used to install a number of packages working together (and having actual contents) to be conveniently installed together, while tracking all dependencies. The definition of runtime dependencies in the manifest (package.xml) file of universal_robot meta-package misses the runtime dependency on the ur_msgs package, which means that python programs trying to send or receive messages will crash. The issue is ROS-specific as it appears in ROS-specific package.xml files.  However, the issue of missing runtime dependencies overall, is a general software-engineering issue. The first pull request linked has not been merged, but a larger pull request has been merged that contain the fix. This is why we link two PRs. This bug also affects statically compiled languages (not only python), because format 1 of package.xml uses runtime dependencies both to specify actual runtime dependencies and dependencies that are needed to build the referring package (build dependencies are reserved for dependencies needed to build the referred package). This is explained in the REP, in the second link below.\n", "cwe": "run-time dependency issue (no CWE) internal classification (cause): internal classification (effect):\n", "cve": "None", "keywords": ["package.xml", "catkin"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://wiki.ros.org/catkin/package.xml", "http://www.ros.org/reps/rep-0140.html#rationale", "https://github.com/aliasrobotics/RVD/issues/692"], "flaw_phase": "runtime-initialization", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/universal_robot", "flaw_languages": ["python"], "flaw_date-detected": "", "flaw_detected-by": "runtime detection", "flaw_detected-by-method": "N/A", "flaw_date-reported": "unreported", "flaw_reported-by": "unreported", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/692", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/100 | https://github.com/ros-industrial/universal_robot/pull/130"}]}, {"__class__": "tuple", "__value__": [{"id": 717, "title": "Missing runtime dependency on message definitions", "type": "weakness", "description": "ROS uses channels (known as 'topics') for communication.  Each topic is typed by a format of the messages it can carry. Messages are defined in a .msg file (.msg is essentially a super simple data-definition-langage (DDL)).  Implementations of messages are generated from msg files at compile time and then used at runtime to serialize and deserialize messages for communication. Meta-packages in ROS are used to install a number of packages working together (and having actual contents) to be conveniently installed together, while tracking all dependencies. The definition of runtime dependencies in the manifest (package.xml) file of universal_robot meta-package misses the runtime dependency on the ur_msgs package, which means that python programs trying to send or receive messages will crash. The issue is ROS-specific as it appears in ROS-specific package.xml files.  However, the issue of missing runtime dependencies overall, is a general software-engineering issue. The first pull request linked has not been merged, but a larger pull request has been merged that contain the fix. This is why we link two PRs. This bug also affects statically compiled languages (not only python), because format 1 of package.xml uses runtime dependencies both to specify actual runtime dependencies and dependencies that are needed to build the referring package (build dependencies are reserved for dependencies needed to build the referred package). This is explained in the REP, in the second link below.\n", "cwe": "run-time dependency issue (no CWE) internal classification (cause): internal classification (effect):\n", "cve": "None", "keywords": ["package.xml", "catkin"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://wiki.ros.org/catkin/package.xml", "http://www.ros.org/reps/rep-0140.html#rationale", "https://github.com/aliasrobotics/RVD/issues/717"], "flaw_phase": "runtime-initialization", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/universal_robot", "flaw_languages": ["python"], "flaw_date-detected": "", "flaw_detected-by": "runtime detection", "flaw_detected-by-method": "N/A", "flaw_date-reported": "unreported", "flaw_reported-by": "unreported", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/717", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/100 | https://github.com/ros-industrial/universal_robot/pull/130"}, {"id": 682, "title": "Missing Runtime Dependency on MoveIt config", "type": "weakness", "description": "The universal_robot package misses a runtime dependency in the manifest file package.xml.  This has prevented the driver to pass continuous integration tests.\n", "cwe": "Run-time dependency issue (no CWE)\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["dependencies", "runtime", "launch", "package.xml"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://github.com/aliasrobotics/RVD/issues/682"], "flaw_phase": "runtime-initialization", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform-code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/package.xml", "flaw_languages": "(presumably) python", "flaw_date-detected": "", "flaw_detected-by": "runtime crash", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2014-03-31 (15:19)", "flaw_reported-by": "contributor", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/682", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/53"}]}, {"__class__": "tuple", "__value__": [{"id": 644, "title": "Missing dependency to catkin", "type": "weakness", "description": "The package.xml describes the build, run-time and buildtools dependencies to a package. In the Motoman Metapackage there is a missing buildtool depenency to catkin, the ROS buildtool.\n", "cwe": "Missing Dependency (no CWE)", "cve": "None", "keywords": ["catkin", "buildtool", "dependency"], "system": "motoman", "vendor": null, "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://github.com/aliasrobotics/RVD/issues/644"], "flaw_phase": "build-time", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform code", "flaw_application": "industrial N/A", "flaw_subsystem": "N/A", "flaw_package": "ros-industrial/motoman", "flaw_languages": ["XML"], "flaw_date-detected": "", "flaw_detected-by": "developer", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2013-08-01 (00:00)", "flaw_reported-by": "member developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/644", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": 3}, {"id": 635, "title": "Missing dependencies to gencpp, which is important for ROS messages and services", "type": "weakness", "description": "CMakeList is essential for every ROS package and it contains the information of the packages, which is needed for the buildsystem. If you have a target which depends on some other target you need to add an explicit dependency so that they are built in the correct order. In the example the node \"cob_obstacle_distance\" depends on \"cob_obstacle_distance_gencpp\". Gencpp is apparently a helper when adding some msgs as dependencies to a target node.  However, the node was linking to \"cob_srvs_gencpp\" which might have been correct at a former time (Apparently, the package has been renamed).  This could be solved by naming the dependency \"${PROJECT_NAME}_gencpp\". The \"PROJECT_NAME\" corresponds to the package name and thus, one can have a generic name, which is independent of the package name.\n", "cwe": "Missing Dependency (no CWE)", "cve": "None", "keywords": ["missing", "dependencies", "gencpp", "project_name", "CMakeLists"], "system": "care-o-bot", "vendor": null, "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://wiki.ros.org/catkin/CMakeLists.txt", "http://wiki.ros.org/gencpp", "https://github.com/aliasrobotics/RVD/issues/635"], "flaw_phase": "deployment-time", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "application-specific", "flaw_application": "N/A", "flaw_subsystem": "specific application component", "flaw_package": "cob_obstacle_distance", "flaw_languages": "None", "flaw_date-detected": "", "flaw_detected-by": "developer", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2015-08-03 (14:15)", "flaw_reported-by": "developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/635", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ipa320/cob_control/pull/47"}]}, {"__class__": "tuple", "__value__": [{"id": 644, "title": "Missing dependency to catkin", "type": "weakness", "description": "The package.xml describes the build, run-time and buildtools dependencies to a package. In the Motoman Metapackage there is a missing buildtool depenency to catkin, the ROS buildtool.\n", "cwe": "Missing Dependency (no CWE)", "cve": "None", "keywords": ["catkin", "buildtool", "dependency"], "system": "motoman", "vendor": null, "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://github.com/aliasrobotics/RVD/issues/644"], "flaw_phase": "build-time", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform code", "flaw_application": "industrial N/A", "flaw_subsystem": "N/A", "flaw_package": "ros-industrial/motoman", "flaw_languages": ["XML"], "flaw_date-detected": "", "flaw_detected-by": "developer", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2013-08-01 (00:00)", "flaw_reported-by": "member developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/644", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": 3}, {"id": 642, "title": "Missing dependencies to gencpp, which is important for ROS messages and services", "type": "weakness", "description": "CMakeList is essential for every ROS package and it contains the information of the packages, which is needed for the buildsystem. If you have a target which depends on some other target you need to add an explicit dependency so that they are built in the correct order. In the example the node \"output_publisher\" depends on \"cob_srvsgencpp\", but the dependency was missing.  Gencpp is apparently a helper when adding some msgs as dependencies to a target node.  This could be solved by naming the dependency \"cob_srvs_gencpp\". Even better would be to name it \"${PROJECT_NAME}_gencpp\". The \"PROJECT_NAME\" corresponds to the package name and thus, one can have a generic name, which is independent of the package name.\n", "cwe": "Missing Dependency (no CWE)", "cve": "None", "keywords": ["missing", "dependencies", "gencpp", "project_name", "CMakeLists"], "system": "care-o-bot", "vendor": null, "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://wiki.ros.org/catkin/CMakeLists.txt", "http://wiki.ros.org/gencpp", "https://github.com/aliasrobotics/RVD/issues/642"], "flaw_phase": "deployment-time", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "application-specific", "flaw_application": "N/A", "flaw_subsystem": "specific application component", "flaw_package": "cob_twist_controller", "flaw_languages": "None", "flaw_date-detected": "", "flaw_detected-by": "developer", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2014-07-22 (15:37)", "flaw_reported-by": "developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/642", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/thiagodefreitas/cob_control/commit/105dc16ffe0b9dba294aabea0c18052cd281bde0"}]}, {"__class__": "tuple", "__value__": [{"id": 717, "title": "Missing runtime dependency on message definitions", "type": "weakness", "description": "ROS uses channels (known as 'topics') for communication.  Each topic is typed by a format of the messages it can carry. Messages are defined in a .msg file (.msg is essentially a super simple data-definition-langage (DDL)).  Implementations of messages are generated from msg files at compile time and then used at runtime to serialize and deserialize messages for communication. Meta-packages in ROS are used to install a number of packages working together (and having actual contents) to be conveniently installed together, while tracking all dependencies. The definition of runtime dependencies in the manifest (package.xml) file of universal_robot meta-package misses the runtime dependency on the ur_msgs package, which means that python programs trying to send or receive messages will crash. The issue is ROS-specific as it appears in ROS-specific package.xml files.  However, the issue of missing runtime dependencies overall, is a general software-engineering issue. The first pull request linked has not been merged, but a larger pull request has been merged that contain the fix. This is why we link two PRs. This bug also affects statically compiled languages (not only python), because format 1 of package.xml uses runtime dependencies both to specify actual runtime dependencies and dependencies that are needed to build the referring package (build dependencies are reserved for dependencies needed to build the referred package). This is explained in the REP, in the second link below.\n", "cwe": "run-time dependency issue (no CWE) internal classification (cause): internal classification (effect):\n", "cve": "None", "keywords": ["package.xml", "catkin"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://wiki.ros.org/catkin/package.xml", "http://www.ros.org/reps/rep-0140.html#rationale", "https://github.com/aliasrobotics/RVD/issues/717"], "flaw_phase": "runtime-initialization", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/universal_robot", "flaw_languages": ["python"], "flaw_date-detected": "", "flaw_detected-by": "runtime detection", "flaw_detected-by-method": "N/A", "flaw_date-reported": "unreported", "flaw_reported-by": "unreported", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/717", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/100 | https://github.com/ros-industrial/universal_robot/pull/130"}, {"id": 707, "title": "Missing Runtime Dependency on MoveIt config", "type": "weakness", "description": "The universal_robot package misses a runtime dependency in the manifest file package.xml.  This has prevented the driver to pass continuous integration tests.\n", "cwe": "Run-time dependency issue (no CWE)\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["dependencies", "runtime", "launch", "package.xml"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://github.com/aliasrobotics/RVD/issues/707"], "flaw_phase": "runtime-initialization", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform-code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/package.xml", "flaw_languages": "(presumably) python", "flaw_date-detected": "", "flaw_detected-by": "runtime crash", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2014-03-31 (15:19)", "flaw_reported-by": "contributor", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/707", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/53"}]}, {"__class__": "tuple", "__value__": [{"id": 692, "title": "Missing runtime dependency on message definitions", "type": "weakness", "description": "ROS uses channels (known as 'topics') for communication.  Each topic is typed by a format of the messages it can carry. Messages are defined in a .msg file (.msg is essentially a super simple data-definition-langage (DDL)).  Implementations of messages are generated from msg files at compile time and then used at runtime to serialize and deserialize messages for communication. Meta-packages in ROS are used to install a number of packages working together (and having actual contents) to be conveniently installed together, while tracking all dependencies. The definition of runtime dependencies in the manifest (package.xml) file of universal_robot meta-package misses the runtime dependency on the ur_msgs package, which means that python programs trying to send or receive messages will crash. The issue is ROS-specific as it appears in ROS-specific package.xml files.  However, the issue of missing runtime dependencies overall, is a general software-engineering issue. The first pull request linked has not been merged, but a larger pull request has been merged that contain the fix. This is why we link two PRs. This bug also affects statically compiled languages (not only python), because format 1 of package.xml uses runtime dependencies both to specify actual runtime dependencies and dependencies that are needed to build the referring package (build dependencies are reserved for dependencies needed to build the referred package). This is explained in the REP, in the second link below.\n", "cwe": "run-time dependency issue (no CWE) internal classification (cause): internal classification (effect):\n", "cve": "None", "keywords": ["package.xml", "catkin"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://wiki.ros.org/catkin/package.xml", "http://www.ros.org/reps/rep-0140.html#rationale", "https://github.com/aliasrobotics/RVD/issues/692"], "flaw_phase": "runtime-initialization", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/universal_robot", "flaw_languages": ["python"], "flaw_date-detected": "", "flaw_detected-by": "runtime detection", "flaw_detected-by-method": "N/A", "flaw_date-reported": "unreported", "flaw_reported-by": "unreported", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/692", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/100 | https://github.com/ros-industrial/universal_robot/pull/130"}, {"id": 682, "title": "Missing Runtime Dependency on MoveIt config", "type": "weakness", "description": "The universal_robot package misses a runtime dependency in the manifest file package.xml.  This has prevented the driver to pass continuous integration tests.\n", "cwe": "Run-time dependency issue (no CWE)\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["dependencies", "runtime", "launch", "package.xml"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://github.com/aliasrobotics/RVD/issues/682"], "flaw_phase": "runtime-initialization", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform-code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/package.xml", "flaw_languages": "(presumably) python", "flaw_date-detected": "", "flaw_detected-by": "runtime crash", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2014-03-31 (15:19)", "flaw_reported-by": "contributor", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/682", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/53"}]}, {"__class__": "tuple", "__value__": [{"id": 710, "title": "Missing runtime dependency on another package (industrial robot simulator)", "type": "weakness", "description": "The universal robot planner (moveit) module lacks a runtime dependency on the industrial robot simulator.  This leads to a runtime error (presumably). This bug has been repeated in multiple drivers. All industrial moveit_config packages use the industrial_robot_simulator, but don't declare a runtime dependency on it.  Affected robots include ABB, Fanuc, Motoman, Universal Robot.\n", "cwe": "run-time dependency issue (no CWE)\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["package.xml"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://wiki.ros.org/industrial_robot_simulator", "https://github.com/aliasrobotics/RVD/issues/710"], "flaw_phase": "runtime-initialization", "flaw_specificity": "ROS", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/ur5_moveit_config/", "flaw_languages": ["Python"], "flaw_date-detected": "", "flaw_detected-by": "runtime detection", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2014-02-10 (12:19)", "flaw_reported-by": "member developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/710", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/42"}, {"id": 682, "title": "Missing Runtime Dependency on MoveIt config", "type": "weakness", "description": "The universal_robot package misses a runtime dependency in the manifest file package.xml.  This has prevented the driver to pass continuous integration tests.\n", "cwe": "Run-time dependency issue (no CWE)\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["dependencies", "runtime", "launch", "package.xml"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://github.com/aliasrobotics/RVD/issues/682"], "flaw_phase": "runtime-initialization", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform-code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/package.xml", "flaw_languages": "(presumably) python", "flaw_date-detected": "", "flaw_detected-by": "runtime crash", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2014-03-31 (15:19)", "flaw_reported-by": "contributor", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/682", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/53"}]}, {"__class__": "tuple", "__value__": [{"id": 723, "title": "Missing runtime dependency to run UR robots Gazebo simulation", "type": "weakness", "description": "The moveit_simple_controller_manager package is not installed due to missing runtime dependencies in MoveIt configuration files for ur robots. The issue has been reported by the universal_robot driver user who merely tried to follow the readme instructions how to start up gazebo-based simulation.  Starting the simulation results in a runtime exception from python about a missing module.  This kind of problems are hard to track for developers who often have all the dependencies installed.  However a continuous integration setup would usually build from scratch detecting most of such. The issue is ROS-specific as it appears in ROS-specific package.xml files.  However, the issue of missing runtime dependencies overall, is a general software-engineering issue.\n", "cwe": "run-time dependency issue (no CWE)\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["gazebo", "simulation", "dependency", "package.xml"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://wiki.ros.org/catkin/package.xml", "https://github.com/aliasrobotics/RVD/issues/723"], "flaw_phase": "runtime-initialization", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform-code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ur10_moveit_config | ur3_moveit_config | ur5_moveit_config", "flaw_languages": ["Python"], "flaw_date-detected": "", "flaw_detected-by": "runtime detection", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2015-12-02 (23:24)", "flaw_reported-by": "guest user", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/723", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/236"}, {"id": 707, "title": "Missing Runtime Dependency on MoveIt config", "type": "weakness", "description": "The universal_robot package misses a runtime dependency in the manifest file package.xml.  This has prevented the driver to pass continuous integration tests.\n", "cwe": "Run-time dependency issue (no CWE)\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["dependencies", "runtime", "launch", "package.xml"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://github.com/aliasrobotics/RVD/issues/707"], "flaw_phase": "runtime-initialization", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform-code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/package.xml", "flaw_languages": "(presumably) python", "flaw_date-detected": "", "flaw_detected-by": "runtime crash", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2014-03-31 (15:19)", "flaw_reported-by": "contributor", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/707", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/53"}]}], "match": [{"__class__": "tuple", "__value__": [{"id": 717, "title": "Missing runtime dependency on message definitions", "type": "weakness", "description": "ROS uses channels (known as 'topics') for communication.  Each topic is typed by a format of the messages it can carry. Messages are defined in a .msg file (.msg is essentially a super simple data-definition-langage (DDL)).  Implementations of messages are generated from msg files at compile time and then used at runtime to serialize and deserialize messages for communication. Meta-packages in ROS are used to install a number of packages working together (and having actual contents) to be conveniently installed together, while tracking all dependencies. The definition of runtime dependencies in the manifest (package.xml) file of universal_robot meta-package misses the runtime dependency on the ur_msgs package, which means that python programs trying to send or receive messages will crash. The issue is ROS-specific as it appears in ROS-specific package.xml files.  However, the issue of missing runtime dependencies overall, is a general software-engineering issue. The first pull request linked has not been merged, but a larger pull request has been merged that contain the fix. This is why we link two PRs. This bug also affects statically compiled languages (not only python), because format 1 of package.xml uses runtime dependencies both to specify actual runtime dependencies and dependencies that are needed to build the referring package (build dependencies are reserved for dependencies needed to build the referred package). This is explained in the REP, in the second link below.\n", "cwe": "run-time dependency issue (no CWE) internal classification (cause): internal classification (effect):\n", "cve": "None", "keywords": ["package.xml", "catkin"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://wiki.ros.org/catkin/package.xml", "http://www.ros.org/reps/rep-0140.html#rationale", "https://github.com/aliasrobotics/RVD/issues/717"], "flaw_phase": "runtime-initialization", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/universal_robot", "flaw_languages": ["python"], "flaw_date-detected": "", "flaw_detected-by": "runtime detection", "flaw_detected-by-method": "N/A", "flaw_date-reported": "unreported", "flaw_reported-by": "unreported", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/717", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/100 | https://github.com/ros-industrial/universal_robot/pull/130"}, {"id": 692, "title": "Missing runtime dependency on message definitions", "type": "weakness", "description": "ROS uses channels (known as 'topics') for communication.  Each topic is typed by a format of the messages it can carry. Messages are defined in a .msg file (.msg is essentially a super simple data-definition-langage (DDL)).  Implementations of messages are generated from msg files at compile time and then used at runtime to serialize and deserialize messages for communication. Meta-packages in ROS are used to install a number of packages working together (and having actual contents) to be conveniently installed together, while tracking all dependencies. The definition of runtime dependencies in the manifest (package.xml) file of universal_robot meta-package misses the runtime dependency on the ur_msgs package, which means that python programs trying to send or receive messages will crash. The issue is ROS-specific as it appears in ROS-specific package.xml files.  However, the issue of missing runtime dependencies overall, is a general software-engineering issue. The first pull request linked has not been merged, but a larger pull request has been merged that contain the fix. This is why we link two PRs. This bug also affects statically compiled languages (not only python), because format 1 of package.xml uses runtime dependencies both to specify actual runtime dependencies and dependencies that are needed to build the referring package (build dependencies are reserved for dependencies needed to build the referred package). This is explained in the REP, in the second link below.\n", "cwe": "run-time dependency issue (no CWE) internal classification (cause): internal classification (effect):\n", "cve": "None", "keywords": ["package.xml", "catkin"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://wiki.ros.org/catkin/package.xml", "http://www.ros.org/reps/rep-0140.html#rationale", "https://github.com/aliasrobotics/RVD/issues/692"], "flaw_phase": "runtime-initialization", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/universal_robot", "flaw_languages": ["python"], "flaw_date-detected": "", "flaw_detected-by": "runtime detection", "flaw_detected-by-method": "N/A", "flaw_date-reported": "unreported", "flaw_reported-by": "unreported", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/692", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/100 | https://github.com/ros-industrial/universal_robot/pull/130"}]}, {"__class__": "tuple", "__value__": [{"id": 702, "title": "Driver locks without discovering that a trajectory has been realized or failed", "type": "weakness", "description": "The python driver is not detecting that a robot arm has reached a goal point of a trajectory planned.  It never sends an information that the final point has been reached and locks. The fix relies on distinguishing two situations: whether the robot got stuck due to planning errors, or whether it has reached the final destination (and the final location has been communicated). The deadlocks are intermittent, probably dependent on numerical proximity of the goal and the present position, or on timing.\n", "cwe": "CWE-440: Expected Behavior Violation #PHYSICAL\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["trajectory", "ur", "driver", "locked", "planning"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://github.com/aliasrobotics/RVD/issues/702"], "flaw_phase": "runtime-operation", "flaw_specificity": "robotics-specific", "flaw_architectural-location": "platform-code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/ur_driver", "flaw_languages": "None", "flaw_date-detected": "", "flaw_detected-by": "runtime detection", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2014-02-03 (23:23)", "flaw_reported-by": "member developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/702", "flaw_reproducibility": "sometimes", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/37"}, {"id": 677, "title": "Driver locks without discovering that a trajectory has been realized or failed", "type": "weakness", "description": "The python driver is not detecting that a robot arm has reached a goal point of a trajectory planned.  It never sends an information that the final point has been reached and locks. The fix relies on distinguishing two situations: whether the robot got stuck due to planning errors, or whether it has reached the final destination (and the final location has been communicated). The deadlocks are intermittent, probably dependent on numerical proximity of the goal and the present position, or on timing.\n", "cwe": "CWE-440: Expected Behavior Violation #PHYSICAL\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["trajectory", "ur", "driver", "locked", "planning"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://github.com/aliasrobotics/RVD/issues/677"], "flaw_phase": "runtime-operation", "flaw_specificity": "robotics-specific", "flaw_architectural-location": "platform-code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/ur_driver", "flaw_languages": "None", "flaw_date-detected": "", "flaw_detected-by": "runtime detection", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2014-02-03 (23:23)", "flaw_reported-by": "member developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/677", "flaw_reproducibility": "sometimes", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/37"}]}, {"__class__": "tuple", "__value__": [{"id": 642, "title": "Missing dependencies to gencpp, which is important for ROS messages and services", "type": "weakness", "description": "CMakeList is essential for every ROS package and it contains the information of the packages, which is needed for the buildsystem. If you have a target which depends on some other target you need to add an explicit dependency so that they are built in the correct order. In the example the node \"output_publisher\" depends on \"cob_srvsgencpp\", but the dependency was missing.  Gencpp is apparently a helper when adding some msgs as dependencies to a target node.  This could be solved by naming the dependency \"cob_srvs_gencpp\". Even better would be to name it \"${PROJECT_NAME}_gencpp\". The \"PROJECT_NAME\" corresponds to the package name and thus, one can have a generic name, which is independent of the package name.\n", "cwe": "Missing Dependency (no CWE)", "cve": "None", "keywords": ["missing", "dependencies", "gencpp", "project_name", "CMakeLists"], "system": "care-o-bot", "vendor": null, "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://wiki.ros.org/catkin/CMakeLists.txt", "http://wiki.ros.org/gencpp", "https://github.com/aliasrobotics/RVD/issues/642"], "flaw_phase": "deployment-time", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "application-specific", "flaw_application": "N/A", "flaw_subsystem": "specific application component", "flaw_package": "cob_twist_controller", "flaw_languages": "None", "flaw_date-detected": "", "flaw_detected-by": "developer", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2014-07-22 (15:37)", "flaw_reported-by": "developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/642", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/thiagodefreitas/cob_control/commit/105dc16ffe0b9dba294aabea0c18052cd281bde0"}, {"id": 635, "title": "Missing dependencies to gencpp, which is important for ROS messages and services", "type": "weakness", "description": "CMakeList is essential for every ROS package and it contains the information of the packages, which is needed for the buildsystem. If you have a target which depends on some other target you need to add an explicit dependency so that they are built in the correct order. In the example the node \"cob_obstacle_distance\" depends on \"cob_obstacle_distance_gencpp\". Gencpp is apparently a helper when adding some msgs as dependencies to a target node.  However, the node was linking to \"cob_srvs_gencpp\" which might have been correct at a former time (Apparently, the package has been renamed).  This could be solved by naming the dependency \"${PROJECT_NAME}_gencpp\". The \"PROJECT_NAME\" corresponds to the package name and thus, one can have a generic name, which is independent of the package name.\n", "cwe": "Missing Dependency (no CWE)", "cve": "None", "keywords": ["missing", "dependencies", "gencpp", "project_name", "CMakeLists"], "system": "care-o-bot", "vendor": null, "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://wiki.ros.org/catkin/CMakeLists.txt", "http://wiki.ros.org/gencpp", "https://github.com/aliasrobotics/RVD/issues/635"], "flaw_phase": "deployment-time", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "application-specific", "flaw_application": "N/A", "flaw_subsystem": "specific application component", "flaw_package": "cob_obstacle_distance", "flaw_languages": "None", "flaw_date-detected": "", "flaw_detected-by": "developer", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2015-08-03 (14:15)", "flaw_reported-by": "developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/635", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ipa320/cob_control/pull/47"}]}, {"__class__": "tuple", "__value__": [{"id": 640, "title": "Missing dependencies to an external library", "type": "weakness", "description": "The file package.xml is essential for every ROS package and it contains among others the dependencies of the packages.  In this example the dependency on \"pynotify\" is missing in the rosdep list and thus, there is an error by installing the package from apt-get install.  This could be solved by removing the dependencies inside the python script, which was using the library, since it was not required anymore. Otherwise, one would have needed to add the dependency to the package.xml.\n", "cwe": "Missing Dependency (no CWE)", "cve": "None", "keywords": ["missing", "dependencies", "library", "package.xml"], "system": "care-o-bot", "vendor": null, "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://wiki.ros.org/catkin/package.xml", "https://github.com/aliasrobotics/RVD/issues/640"], "flaw_phase": "deployment-time", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "application-specific", "flaw_application": "N/A", "flaw_subsystem": "specific application component", "flaw_package": "cob_command_gui", "flaw_languages": "None", "flaw_date-detected": "", "flaw_detected-by": "developer", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2015-01-14 (15:17)", "flaw_reported-by": "developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/640", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ipa320/cob_command_tools/pull/84"}, {"id": 634, "title": "Missing dependencies to an external library", "type": "weakness", "description": "The file package.xml is essential for every ROS package and it contains among others the dependencies of the packages.  In this example the dependency on \"ipython\" is missing in the rosdep list and thus, there should be an error by e.g. installing the package from apt-get install.  This could be solved by adding the dependency to the package.xml with the line <run_depend>ipython</run_depend>.\n", "cwe": "Missing Dependency (no CWE)", "cve": "None", "keywords": ["missing", "dependencies", "library", "package.xml"], "system": "care-o-bot", "vendor": null, "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://wiki.ros.org/catkin/package.xml", "https://github.com/aliasrobotics/RVD/issues/634"], "flaw_phase": "deployment-time", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "application-specific", "flaw_application": "N/A", "flaw_subsystem": "specific application component", "flaw_package": "cob_script_server", "flaw_languages": "N/A", "flaw_date-detected": "", "flaw_detected-by": "developer", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2014-05-20 (16:52)", "flaw_reported-by": "developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/634", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": ""}]}, {"__class__": "tuple", "__value__": [{"id": 712, "title": "Using a Boost type instead of a C++11 type", "type": "weakness", "description": "The urdf_model package started to use C++11 features, more precisely the shared pointer type that clashes with a similar type in the Boost library. The (single) call to this package needs to be updated from boost::shared_ptr to std::shared_ptr as otherwise the compiler fails with a type error. This issue is caused by the dependent upon packages switching to a newer programmin language version.  This issue could appear in any complex projects which mixes versions of the programming language (here C++). (At the time of analysis of this bug, the fix was not merged.)\n", "cwe": "Type error (no CWE) #EVOLUTION: CWE-439\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["C++11", "boost", "pointer"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["see also bug 94927ae", "https://github.com/aliasrobotics/RVD/issues/712"], "flaw_phase": "compile-time", "flaw_specificity": "general issue", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/ur_kinematics", "flaw_languages": ["C++"], "flaw_date-detected": "", "flaw_detected-by": "compile-time", "flaw_detected-by-method": "N/A", "flaw_date-reported": "None", "flaw_reported-by": "", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/712", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/303"}, {"id": 687, "title": "Using a Boost type instead of a C++11 type", "type": "weakness", "description": "The urdf_model package started to use C++11 features, more precisely the shared pointer type that clashes with a similar type in the Boost library. The (single) call to this package needs to be updated from boost::shared_ptr to std::shared_ptr as otherwise the compiler fails with a type error. This issue is caused by the dependent upon packages switching to a newer programmin language version.  This issue could appear in any complex projects which mixes versions of the programming language (here C++). (At the time of analysis of this bug, the fix was not merged.)\n", "cwe": "Type error (no CWE) #EVOLUTION: CWE-439\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["C++11", "boost", "pointer"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["see also bug 94927ae", "https://github.com/aliasrobotics/RVD/issues/687"], "flaw_phase": "compile-time", "flaw_specificity": "general issue", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/ur_kinematics", "flaw_languages": ["C++"], "flaw_date-detected": "", "flaw_detected-by": "compile-time", "flaw_detected-by-method": "N/A", "flaw_date-reported": "None", "flaw_reported-by": "", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/687", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/303"}]}, {"__class__": "tuple", "__value__": [{"id": 714, "title": "Specifications of dimensions of a robot arm are not reflecting real dimensions", "type": "weakness", "description": "URDF is an XML-based modeling language in which robot physical models are described. As robots are often produced in families of similar devices, it is convenient to parameterize this models. ROS uses the XACRO language to write parameterized models.  XACRO files are preprocessed to generate instantiated URDF files. In this particular case, a XACRO file contained physical dimensions of the UR10 robots that were inconsistent with those stored in the native software of Universal Robots (and also inconsistent with the documentation data). This means that the robot visualized in the visualization tool Rviz and used in simulation behaved differently than the real robot.  This poses an issue for testing and quality assurance. The issue is specific to ROS as it occurs in a ROS specific modeling language (URDF/XACRO).  However the same problem would naturally appear in any robotics framework, just in a different language. The discussion has started on the mailing list, and then have been promoted to the issue tracker, and referred from a larger pull requests that also improves other visual issues with URDF files, and reorganizes the files, so many aspects of the linked commit do not pertain to this bug. The same patch also fixes some potentially interesting issues with mass and inertia of the robot elements.\n", "cwe": "Wrong Robot Model (no CWE) #PHYSICAL\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["urdf", "xacro", "rviz", "driver"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://groups.google.com/forum/#!topic/swri-ros-pkg-dev/1e3A_1BTQWQ", "https://github.com/aliasrobotics/RVD/issues/714"], "flaw_phase": "runtime-operation", "flaw_specificity": "robotics", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/ur_description", "flaw_languages": "None", "flaw_date-detected": "", "flaw_detected-by": "developer", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2014-05-27 (15:40)", "flaw_reported-by": "member developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/714", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/82"}, {"id": 689, "title": "Specifications of dimensions of a robot arm are not reflecting real dimensions", "type": "weakness", "description": "URDF is an XML-based modeling language in which robot physical models are described. As robots are often produced in families of similar devices, it is convenient to parameterize this models. ROS uses the XACRO language to write parameterized models.  XACRO files are preprocessed to generate instantiated URDF files. In this particular case, a XACRO file contained physical dimensions of the UR10 robots that were inconsistent with those stored in the native software of Universal Robots (and also inconsistent with the documentation data). This means that the robot visualized in the visualization tool Rviz and used in simulation behaved differently than the real robot.  This poses an issue for testing and quality assurance. The issue is specific to ROS as it occurs in a ROS specific modeling language (URDF/XACRO).  However the same problem would naturally appear in any robotics framework, just in a different language. The discussion has started on the mailing list, and then have been promoted to the issue tracker, and referred from a larger pull requests that also improves other visual issues with URDF files, and reorganizes the files, so many aspects of the linked commit do not pertain to this bug. The same patch also fixes some potentially interesting issues with mass and inertia of the robot elements.\n", "cwe": "Wrong Robot Model (no CWE) #PHYSICAL\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["urdf", "xacro", "rviz", "driver"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://groups.google.com/forum/#!topic/swri-ros-pkg-dev/1e3A_1BTQWQ", "https://github.com/aliasrobotics/RVD/issues/689"], "flaw_phase": "runtime-operation", "flaw_specificity": "robotics", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/ur_description", "flaw_languages": "None", "flaw_date-detected": "", "flaw_detected-by": "developer", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2014-05-27 (15:40)", "flaw_reported-by": "member developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/689", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/82"}]}, {"__class__": "tuple", "__value__": [{"id": 711, "title": "An exported library is not installed", "type": "weakness", "description": "The ur_kinematics package exports two libraries (ur5_moveit_plugin, ur10_moveit_plugin) to be used in depending packages.  This will work well if the packages using ur_kinematics are in the same workspace (devel space).  Since the installation script is missing for these two libraries, they will not be properly installed by the catkin build system, and if the libraries are not otherwise available in the system, this leads to a build failure for depending packages. The bug was detected by catkin_lint, a ROS-specific build system scanning tool.  The first link on to documentation of catkin_lint provides a definition of this alarm. The bug appears in ROS-specific build system. However, the dependency issue is a general issue in software engineering. The original commit also made unrelated changes to package.xml.\n", "cwe": "Missing Build Dependency (no CWE) internal classification (cause): internal classification (effect):\n", "cve": "None", "keywords": ["catkin", "catkin_lint", "install", "dependencies"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://github.com/fkie/catkin_lint/blob/master/gh-pages/docs/messages.md#exported-library-target-is-not-installed", "https://github.com/aliasrobotics/RVD/issues/711"], "flaw_phase": "build-time", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/ur_kinematics", "flaw_languages": ["CMake"], "flaw_date-detected": "", "flaw_detected-by": "code scanning tool", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2014-09-21 (08:17)", "flaw_reported-by": "member developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/711", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/114"}, {"id": 686, "title": "An exported library is not installed", "type": "weakness", "description": "The ur_kinematics package exports two libraries (ur5_moveit_plugin, ur10_moveit_plugin) to be used in depending packages.  This will work well if the packages using ur_kinematics are in the same workspace (devel space).  Since the installation script is missing for these two libraries, they will not be properly installed by the catkin build system, and if the libraries are not otherwise available in the system, this leads to a build failure for depending packages. The bug was detected by catkin_lint, a ROS-specific build system scanning tool.  The first link on to documentation of catkin_lint provides a definition of this alarm. The bug appears in ROS-specific build system. However, the dependency issue is a general issue in software engineering. The original commit also made unrelated changes to package.xml.\n", "cwe": "Missing Build Dependency (no CWE) internal classification (cause): internal classification (effect):\n", "cve": "None", "keywords": ["catkin", "catkin_lint", "install", "dependencies"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://github.com/fkie/catkin_lint/blob/master/gh-pages/docs/messages.md#exported-library-target-is-not-installed", "https://github.com/aliasrobotics/RVD/issues/686"], "flaw_phase": "build-time", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/ur_kinematics", "flaw_languages": ["CMake"], "flaw_date-detected": "", "flaw_detected-by": "code scanning tool", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2014-09-21 (08:17)", "flaw_reported-by": "member developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/686", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/114"}]}]}