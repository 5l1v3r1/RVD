{"distinct": [{"__class__": "tuple", "__value__": [{"id": 700, "title": "Path planning exceeding velocity limits of ur5", "type": "weakness", "description": "This problem is caused by inconsistency between parameters in different parts of the driver (or application). The ROS planner (MoveIt!) plans with the velocity limits specified in joint_limits.yaml, which are retried from a physical description of the robot in URDF files (see limit tag for instance in https://github.com/ros-industrial/universal_robot/blob/hydro-devel/ur_description/urdf/ur5.urdf.xacro#L105). This velocities are specified per joint. The driver (ur_driver) has its own velocity limit.  This limit is specified globally. It has been introduced privately and used for testing and debugging purposes.  The driver stops the motion if the velocity exceeds the maximum. In the reported issue the planner finds plan that exceed join veloctity of 2 rad/s which was the default limit in the ur_driver.  As a fix the developers set the internal driver limit to to infinite (10 rad/s is considered much higher than the actual velocity physically possible with UR5). This allows the faster plans to be executed.  If safety is violated, the safety function of the robot performs a safety stop (on the robot side). Also a possibility of setting the parameter from the launch file has been added (but this is additional functionality, not a bug fix).\n", "cwe": "Wrong behavior (no CWE) #PHYSICAL\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["robot description", "xacro", "launch", "joint", "velocity"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://moveit.ros.org/", "https://github.com/aliasrobotics/RVD/issues/700"], "flaw_phase": "runtime-operation", "flaw_specificity": "robotics-specific", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/ur_driver", "flaw_languages": "None", "flaw_date-detected": "", "flaw_detected-by": "developer", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2014-10-10 (02:34)", "flaw_reported-by": "guest user", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/700", "flaw_reproducibility": "sometimes", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/136"}, {"id": 642, "title": "Missing dependencies to gencpp, which is important for ROS messages and services", "type": "weakness", "description": "CMakeList is essential for every ROS package and it contains the information of the packages, which is needed for the buildsystem. If you have a target which depends on some other target you need to add an explicit dependency so that they are built in the correct order. In the example the node \"output_publisher\" depends on \"cob_srvsgencpp\", but the dependency was missing.  Gencpp is apparently a helper when adding some msgs as dependencies to a target node.  This could be solved by naming the dependency \"cob_srvs_gencpp\". Even better would be to name it \"${PROJECT_NAME}_gencpp\". The \"PROJECT_NAME\" corresponds to the package name and thus, one can have a generic name, which is independent of the package name.\n", "cwe": "Missing Dependency (no CWE)", "cve": "None", "keywords": ["missing", "dependencies", "gencpp", "project_name", "CMakeLists"], "system": "care-o-bot", "vendor": null, "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://wiki.ros.org/catkin/CMakeLists.txt", "http://wiki.ros.org/gencpp", "https://github.com/aliasrobotics/RVD/issues/642"], "flaw_phase": "deployment-time", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "application-specific", "flaw_application": "N/A", "flaw_subsystem": "specific application component", "flaw_package": "cob_twist_controller", "flaw_languages": "None", "flaw_date-detected": "", "flaw_detected-by": "developer", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2014-07-22 (15:37)", "flaw_reported-by": "developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/642", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/thiagodefreitas/cob_control/commit/105dc16ffe0b9dba294aabea0c18052cd281bde0"}]}, {"__class__": "tuple", "__value__": [{"id": 671, "title": "A race condition in message filter of TF2", "type": "weakness", "description": "\"In ROS Message filters are a tool that allows registering subscribers that work with multiple msgs, or trigger callbacks if an arriving message satisfies a predicate. TF provides message filters that are specificlaly tailored---they register callbacks that can triggered whenever the incoming message can be transformed (using tf.transform(..)) into a set of coordinate frames. For instance one can trigger a callback on messages of certain type (a point cloud or an object with a spatial dimension) that can be transformed to selected frames. The problem is that the checking by tf msg filters whether that is possible and the invocation of the callback happen at two separate times, so even if the check succeeds, by the time the callback is fired, it could fail, because the frames could already have been pushed out of the tf buffer. The callbel needs to retrieve the transforms. If tf.lookupTransform(...)  is used it mail fail, even if the transform was applicable at the time of the predicate checking. The race condition is built-in into the design of the API. You can only experience it when you start to use the API, and don't take additional (awkward) protection measures.  This is best summarized with the quote from the original bug report: ''tf::message_filters are difficult to use because you're only guaranteed to have a transform at the beginning of the callback, not when you actually want to use the transform. (..) you can deal with this through judicious use of try-catch loops and setTolerance(), but that seems hacky. Multiple users have had trouble with this concept.'' To the best of our knowledge, this bug / design issue remains in ROS til the time of writing this analysis. It has never been addressed.\"\n", "cwe": "CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')", "cve": "None", "keywords": ["c++", "race condition", "callback"], "system": "core component", "vendor": null, "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://github.com/ros/geometry2/blob/5722773de7d688bcaf8dfe68a0f2a55ff49dc9d3/tf2_ros/include/tf2_ros/message_filter.h The file where the message filter is implemented.", "https://github.com/ros/geometry2/blob/5722773de7d688bcaf8dfe68a0f2a55ff49dc9d3/tf2_ros/include/tf2_ros/message_filter.h#L88 fragment of the file with the API doc for the message filter.", "https://github.com/ros/geometry2/blob/5722773de7d688bcaf8dfe68a0f2a55ff49dc9d3/tf2_ros/include/tf2_ros/message_filter.h#L293 the method invoked on the new (incoming) message.", "https://github.com/aliasrobotics/RVD/issues/671"], "flaw_phase": "runtime-operation", "flaw_specificity": "general issue", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "generic task component", "flaw_package": "ros/geometry2/tf2_ros", "flaw_languages": ["C++"], "flaw_date-detected": "", "flaw_detected-by": "", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2013-10-29 01:05:05", "flaw_reported-by": "member developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/671", "flaw_reproducibility": "sometimes", "flaw_trace": "", "flaw_reproduction": "The idea is to create a buffer object, manually insert some transforms into it, then instantiate a tf message filter, invoke its callbacks do some trickery with a manually crafted msg (its header) and then show that the transform we're looking for, and which msg filters said was there, is no longer there. There is no fixing commit and fixing this requires a redesign of the component (to our best knowledge this race condition has not been fixed until today).  In the discussions whether a design flaw is a bug, we decided to reproduce the race, but not fix the design.  Thus this bug has no fixing commit.\n", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": ""}, {"id": 639, "title": "Hardcoded namespace because name is defined global", "type": "weakness", "description": "Parameter-names are hardcoded. In the example a parameter is named \"/sound_controller/mode\".  There are four types of Graph Resource Names in ROS: base, relative, global, and private. Names that start with a \"/\" are global -- they are considered fully resolved. Global names should be avoided as much as possible as they limit code portability. An error might occure due to the following scenario: The node, which was the global namespace is used within a group tag in a roslaunch file. The group-name is written before every path-name, but not if the path-name is defined globally. This could cause a mismatch of names if not handled correctly.\n", "cwe": "Use of Global Names (no CWE)", "cve": "None", "keywords": ["namespace", "hardcoded", "parameter", "global"], "system": "care-o-bot", "vendor": null, "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://wiki.ros.org/Names", "http://wiki.ros.org/roslaunch/XML/group", "https://github.com/aliasrobotics/RVD/issues/639"], "flaw_phase": "runtime-operation", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "application-specific", "flaw_application": "cob drivers", "flaw_subsystem": "driver", "flaw_package": "cob_drivers", "flaw_languages": ["C++"], "flaw_date-detected": "", "flaw_detected-by": "developer", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2016-04-07 (00:00)", "flaw_reported-by": "member developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/639", "flaw_reproducibility": "sometimes", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ipa320/cob_driver/pull/274"}]}, {"__class__": "tuple", "__value__": [{"id": 717, "title": "Missing runtime dependency on message definitions", "type": "weakness", "description": "ROS uses channels (known as 'topics') for communication.  Each topic is typed by a format of the messages it can carry. Messages are defined in a .msg file (.msg is essentially a super simple data-definition-langage (DDL)).  Implementations of messages are generated from msg files at compile time and then used at runtime to serialize and deserialize messages for communication. Meta-packages in ROS are used to install a number of packages working together (and having actual contents) to be conveniently installed together, while tracking all dependencies. The definition of runtime dependencies in the manifest (package.xml) file of universal_robot meta-package misses the runtime dependency on the ur_msgs package, which means that python programs trying to send or receive messages will crash. The issue is ROS-specific as it appears in ROS-specific package.xml files.  However, the issue of missing runtime dependencies overall, is a general software-engineering issue. The first pull request linked has not been merged, but a larger pull request has been merged that contain the fix. This is why we link two PRs. This bug also affects statically compiled languages (not only python), because format 1 of package.xml uses runtime dependencies both to specify actual runtime dependencies and dependencies that are needed to build the referring package (build dependencies are reserved for dependencies needed to build the referred package). This is explained in the REP, in the second link below.\n", "cwe": "run-time dependency issue (no CWE) internal classification (cause): internal classification (effect):\n", "cve": "None", "keywords": ["package.xml", "catkin"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://wiki.ros.org/catkin/package.xml", "http://www.ros.org/reps/rep-0140.html#rationale", "https://github.com/aliasrobotics/RVD/issues/717"], "flaw_phase": "runtime-initialization", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/universal_robot", "flaw_languages": ["python"], "flaw_date-detected": "", "flaw_detected-by": "runtime detection", "flaw_detected-by-method": "N/A", "flaw_date-reported": "unreported", "flaw_reported-by": "unreported", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/717", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/100 | https://github.com/ros-industrial/universal_robot/pull/130"}, {"id": 692, "title": "Missing runtime dependency on message definitions", "type": "weakness", "description": "ROS uses channels (known as 'topics') for communication.  Each topic is typed by a format of the messages it can carry. Messages are defined in a .msg file (.msg is essentially a super simple data-definition-langage (DDL)).  Implementations of messages are generated from msg files at compile time and then used at runtime to serialize and deserialize messages for communication. Meta-packages in ROS are used to install a number of packages working together (and having actual contents) to be conveniently installed together, while tracking all dependencies. The definition of runtime dependencies in the manifest (package.xml) file of universal_robot meta-package misses the runtime dependency on the ur_msgs package, which means that python programs trying to send or receive messages will crash. The issue is ROS-specific as it appears in ROS-specific package.xml files.  However, the issue of missing runtime dependencies overall, is a general software-engineering issue. The first pull request linked has not been merged, but a larger pull request has been merged that contain the fix. This is why we link two PRs. This bug also affects statically compiled languages (not only python), because format 1 of package.xml uses runtime dependencies both to specify actual runtime dependencies and dependencies that are needed to build the referring package (build dependencies are reserved for dependencies needed to build the referred package). This is explained in the REP, in the second link below.\n", "cwe": "run-time dependency issue (no CWE) internal classification (cause): internal classification (effect):\n", "cve": "None", "keywords": ["package.xml", "catkin"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://wiki.ros.org/catkin/package.xml", "http://www.ros.org/reps/rep-0140.html#rationale", "https://github.com/aliasrobotics/RVD/issues/692"], "flaw_phase": "runtime-initialization", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/universal_robot", "flaw_languages": ["python"], "flaw_date-detected": "", "flaw_detected-by": "runtime detection", "flaw_detected-by-method": "N/A", "flaw_date-reported": "unreported", "flaw_reported-by": "unreported", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/692", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/100 | https://github.com/ros-industrial/universal_robot/pull/130"}]}, {"__class__": "tuple", "__value__": [{"id": 712, "title": "Using a Boost type instead of a C++11 type", "type": "weakness", "description": "The urdf_model package started to use C++11 features, more precisely the shared pointer type that clashes with a similar type in the Boost library. The (single) call to this package needs to be updated from boost::shared_ptr to std::shared_ptr as otherwise the compiler fails with a type error. This issue is caused by the dependent upon packages switching to a newer programmin language version.  This issue could appear in any complex projects which mixes versions of the programming language (here C++). (At the time of analysis of this bug, the fix was not merged.)\n", "cwe": "Type error (no CWE) #EVOLUTION: CWE-439\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["C++11", "boost", "pointer"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["see also bug 94927ae", "https://github.com/aliasrobotics/RVD/issues/712"], "flaw_phase": "compile-time", "flaw_specificity": "general issue", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/ur_kinematics", "flaw_languages": ["C++"], "flaw_date-detected": "", "flaw_detected-by": "compile-time", "flaw_detected-by-method": "N/A", "flaw_date-reported": "None", "flaw_reported-by": "", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/712", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/303"}, {"id": 687, "title": "Using a Boost type instead of a C++11 type", "type": "weakness", "description": "The urdf_model package started to use C++11 features, more precisely the shared pointer type that clashes with a similar type in the Boost library. The (single) call to this package needs to be updated from boost::shared_ptr to std::shared_ptr as otherwise the compiler fails with a type error. This issue is caused by the dependent upon packages switching to a newer programmin language version.  This issue could appear in any complex projects which mixes versions of the programming language (here C++). (At the time of analysis of this bug, the fix was not merged.)\n", "cwe": "Type error (no CWE) #EVOLUTION: CWE-439\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["C++11", "boost", "pointer"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["see also bug 94927ae", "https://github.com/aliasrobotics/RVD/issues/687"], "flaw_phase": "compile-time", "flaw_specificity": "general issue", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/ur_kinematics", "flaw_languages": ["C++"], "flaw_date-detected": "", "flaw_detected-by": "compile-time", "flaw_detected-by-method": "N/A", "flaw_date-reported": "None", "flaw_reported-by": "", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/687", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/303"}]}, {"__class__": "tuple", "__value__": [{"id": 714, "title": "Specifications of dimensions of a robot arm are not reflecting real dimensions", "type": "weakness", "description": "URDF is an XML-based modeling language in which robot physical models are described. As robots are often produced in families of similar devices, it is convenient to parameterize this models. ROS uses the XACRO language to write parameterized models.  XACRO files are preprocessed to generate instantiated URDF files. In this particular case, a XACRO file contained physical dimensions of the UR10 robots that were inconsistent with those stored in the native software of Universal Robots (and also inconsistent with the documentation data). This means that the robot visualized in the visualization tool Rviz and used in simulation behaved differently than the real robot.  This poses an issue for testing and quality assurance. The issue is specific to ROS as it occurs in a ROS specific modeling language (URDF/XACRO).  However the same problem would naturally appear in any robotics framework, just in a different language. The discussion has started on the mailing list, and then have been promoted to the issue tracker, and referred from a larger pull requests that also improves other visual issues with URDF files, and reorganizes the files, so many aspects of the linked commit do not pertain to this bug. The same patch also fixes some potentially interesting issues with mass and inertia of the robot elements.\n", "cwe": "Wrong Robot Model (no CWE) #PHYSICAL\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["urdf", "xacro", "rviz", "driver"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://groups.google.com/forum/#!topic/swri-ros-pkg-dev/1e3A_1BTQWQ", "https://github.com/aliasrobotics/RVD/issues/714"], "flaw_phase": "runtime-operation", "flaw_specificity": "robotics", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/ur_description", "flaw_languages": "None", "flaw_date-detected": "", "flaw_detected-by": "developer", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2014-05-27 (15:40)", "flaw_reported-by": "member developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/714", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/82"}, {"id": 661, "title": "Incorrect response from FS100 to a control request", "type": "weakness", "description": "The FS100 is one of the robot controllers by Motoman that are open to be used with ROS. From ROS side one can send a request for a motion and the controller will respond within a MOTO_MOTION_CTRL message. In some cases the field robot_id and sequence are set to -1. This is from the controller interpreted as unsigned leading to response as 0xFFFFFFFF.\n", "cwe": "CWE-704: Incorrect Type Conversion or Cast", "cve": "None", "keywords": ["FS100 controller", "movement request", "motoman"], "system": "motoman", "vendor": null, "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://github.com/aliasrobotics/RVD/issues/661"], "flaw_phase": "runtime-operation", "flaw_specificity": "general-issue", "flaw_architectural-location": "application-specific", "flaw_application": "industrial robot arm", "flaw_subsystem": "motoplus pluging for the controller", "flaw_package": "ros-industrial/motoman", "flaw_languages": "C", "flaw_date-detected": "", "flaw_detected-by": "user | developer", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2013-06-12 (20:01)", "flaw_reported-by": "member developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/661", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": ""}]}, {"__class__": "tuple", "__value__": [{"id": 645, "title": "ASCII STL file beginning with characters \"solid\"", "type": "weakness", "description": "ASCII STL files are supposed to be designated by the first 5 lines reading \"solid\" in ASCII. The following binary STL files start with \"solid\" and they shouldn't.\n", "cwe": "CWE-172: Encoding Error", "cve": "None", "keywords": ["STL", "robot description"], "system": "motoman", "vendor": null, "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://github.com/aliasrobotics/RVD/issues/645"], "flaw_phase": "compile-time", "flaw_specificity": "general-issue", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "N/A", "flaw_package": "ros-industrial/motoman | ros-industrial/motoman/motoman_mh5_support", "flaw_languages": ["ASCII STL"], "flaw_date-detected": "", "flaw_detected-by": "user", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2015-04-03 (06:24)", "flaw_reported-by": "contributor", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/645", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": 77}, {"id": 636, "title": "Topic names not consistent between hardware and simulation", "type": "weakness", "description": "In ROS it is possible to work equivalent with hardware and simulation(in Gazebo).  A camera can be simulated in Gazebo with a plugin. This plugin has parameters which can be set in the URDF or Xacro. One parameter is e.g. the topic-name on which it publishes the image.  The real robot uses topic-names which are defined in the driver-node for the camera.  Therefore, one has to make sure to use consistent naming conventions to assure the exchangability between hardware and simulation.  In the example the camera topics in simulation do not match the topic names on real hardware.  The problem is solved by introducing consistent naming.\n", "cwe": "inconsistent naming", "cve": "None", "keywords": ["xacro", "gazebo", "topic", "name", "inconsistency"], "system": "care-o-bot", "vendor": null, "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://wiki.ros.org/xacro", "http://gazebosim.org/tutorials?tut=ros_gzplugins", "https://github.com/aliasrobotics/RVD/issues/636"], "flaw_phase": "runtime-operation", "flaw_specificity": "robotics-specific", "flaw_architectural-location": "application-specific", "flaw_application": "cob common", "flaw_subsystem": "robot description", "flaw_package": "cob_common", "flaw_languages": "xacro", "flaw_date-detected": "", "flaw_detected-by": "developer", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2015-11-04 (00:00)", "flaw_reported-by": "member developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/636", "flaw_reproducibility": "sometimes", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ipa320/cob_common/pull/179"}]}, {"__class__": "tuple", "__value__": [{"id": 697, "title": "urX_moveit_config packages depende on meta-package moveit_plugin", "type": "weakness", "description": "The UR moveit config packages, which are proper packages, depend on a meta-package (just a grouping package) moveit_plugins, which is not allowed by ROS packaging standards.  Instead they should depend on concrete packages that they actually use.  See REP-127 linked below; \"Catkin packages must depend directly on the packages they use, not on any metapackages.\" (section <metapackage/>). This causes the build error with the current version of catkin that enforces this rule. The bug is fixed by removing the runtime dependency on moveit_plugins and replacing it with a dependency on controller managers. Meta-packages in ROS are used to install a number of packages working together (and having actual contents) to be conveniently installed together, while tracking all dependencies.  They cannot export dependencies further, so they should only be used to install groups of packages together by a package manager, not by other packages to depend on them. The issue is ROS-specific as it appears in ROS-specific package.xml files.  Moreover it arises due to the enforcement of a ROS-specific packaging decision. (This essentially the same bug as '0c34123'.)\n", "cwe": "run-time dependency issue (no CWE)\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["meta-package", "catkin"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://www.ros.org/reps/rep-0127.html | https://github.com/catkin/catkin_tools/issues/370#issuecomment-219157118", "https://github.com/aliasrobotics/RVD/issues/697"], "flaw_phase": "build-time", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/ur10_moveit_config | ros-industrial/universal_robot/ur3_moveit_config | ros-industrial/universal_robot/ur5_moveit_config", "flaw_languages": "package.xml", "flaw_date-detected": "", "flaw_detected-by": "build system", "flaw_detected-by-method": "N/A", "flaw_date-reported": "unreported", "flaw_reported-by": "unreported", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/697", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/261"}, {"id": 646, "title": "Python script not included in debian build", "type": "weakness", "description": "The file 'move_to_joint.py' is available when building the motoman package from source, but it's missing when installing the package as a binary install.\n", "cwe": "Missing Installation Dependencies (no CWE)", "cve": "None", "keywords": ["CMakeLists.txt", "Debian"], "system": "motoman", "vendor": null, "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://github.com/aliasrobotics/RVD/issues/646"], "flaw_phase": "deployment-time", "flaw_specificity": "general-issue", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "N/A", "flaw_package": "ros-industrial/motoman/", "flaw_languages": "None", "flaw_date-detected": "", "flaw_detected-by": "user", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2016-09-06 (17:48)", "flaw_reported-by": "member developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/646", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": ""}]}, {"__class__": "tuple", "__value__": [{"id": 696, "title": "Robot jumps to the first point of the new trajectory", "type": "weakness", "description": "The problem was caused by using absolute, instead of relative time, when resetting the old trajectory to a new goal.  On_goal() function of the trajectory action server in the ur_driver driver.py file, the sample_traj() function was not being called correctly. It used the absolute time (from time.time()) instead of the offset into the previous trajectory which is used in every other call of this particular function. As a result the robot would attempt to perform an abrupt fast jump to a new trajectory. The bug is an improper contract fullfillment although it was not an 'abuse', as it was not intentional.  The problem can appear is any continous control or planning application, and as that it is not ROS-specific, but robotics-specific. The second pull request is a case of porting up of the same bug fix to a newer development branch (indigo).\n", "cwe": "Dangerous behavior: abrupt arm jump #PHYSICAL\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["planning", "trajectory", "absolute time", "relative time"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://github.com/aliasrobotics/RVD/issues/696"], "flaw_phase": "runtime-operation", "flaw_specificity": "robotics-specific", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/ur_driver", "flaw_languages": "None", "flaw_date-detected": "", "flaw_detected-by": "developer", "flaw_detected-by-method": "N/A", "flaw_date-reported": "None", "flaw_reported-by": "contributor", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/696", "flaw_reproducibility": "sometimes", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/157 | https://github.com/ros-industrial/universal_robot/pull/189"}, {"id": 647, "title": "SIA20D Mesh Arm Navigation Package not following naming conventions", "type": "weakness", "description": "The package name \"SIA20D_Mesh_arm_navigation\" does not follow the naming conventions. It should start with a lower case letter and only contain lower case letters, digits and underscores.\n", "cwe": "Naming Convention Violation (no CWE)", "cve": "None", "keywords": ["naming conventions", "catkin_make"], "system": "motoman", "vendor": null, "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://github.com/aliasrobotics/RVD/issues/647"], "flaw_phase": "compile-time", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "N/A", "flaw_package": "ros-industrial/motoman | ros-industrial/motoman/motoman_sia20d_support", "flaw_languages": ["XML"], "flaw_date-detected": "", "flaw_detected-by": "developer", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2013-08-02 (10:58)", "flaw_reported-by": "member developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/647", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": 15}]}, {"__class__": "tuple", "__value__": [{"id": 717, "title": "Missing runtime dependency on message definitions", "type": "weakness", "description": "ROS uses channels (known as 'topics') for communication.  Each topic is typed by a format of the messages it can carry. Messages are defined in a .msg file (.msg is essentially a super simple data-definition-langage (DDL)).  Implementations of messages are generated from msg files at compile time and then used at runtime to serialize and deserialize messages for communication. Meta-packages in ROS are used to install a number of packages working together (and having actual contents) to be conveniently installed together, while tracking all dependencies. The definition of runtime dependencies in the manifest (package.xml) file of universal_robot meta-package misses the runtime dependency on the ur_msgs package, which means that python programs trying to send or receive messages will crash. The issue is ROS-specific as it appears in ROS-specific package.xml files.  However, the issue of missing runtime dependencies overall, is a general software-engineering issue. The first pull request linked has not been merged, but a larger pull request has been merged that contain the fix. This is why we link two PRs. This bug also affects statically compiled languages (not only python), because format 1 of package.xml uses runtime dependencies both to specify actual runtime dependencies and dependencies that are needed to build the referring package (build dependencies are reserved for dependencies needed to build the referred package). This is explained in the REP, in the second link below.\n", "cwe": "run-time dependency issue (no CWE) internal classification (cause): internal classification (effect):\n", "cve": "None", "keywords": ["package.xml", "catkin"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://wiki.ros.org/catkin/package.xml", "http://www.ros.org/reps/rep-0140.html#rationale", "https://github.com/aliasrobotics/RVD/issues/717"], "flaw_phase": "runtime-initialization", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/universal_robot", "flaw_languages": ["python"], "flaw_date-detected": "", "flaw_detected-by": "runtime detection", "flaw_detected-by-method": "N/A", "flaw_date-reported": "unreported", "flaw_reported-by": "unreported", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/717", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/100 | https://github.com/ros-industrial/universal_robot/pull/130"}, {"id": 648, "title": "Missing dependency on Motoman Messages", "type": "weakness", "description": "The motoman driver package depends on its own special message type: 'motoman_msgs'.  The dependencies to this message type is missing for the motoman package.\n", "cwe": "Missing Include / Dependency (no CWE)", "cve": "None", "keywords": ["dependencies", "motoman", "messages"], "system": "motoman", "vendor": null, "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://github.com/aliasrobotics/RVD/issues/648"], "flaw_phase": "compile-time", "flaw_specificity": "general-issue", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "N/A", "flaw_package": "ros-industrial/motoman | ros-industrial/motoman/motoman_driver", "flaw_languages": ["CMake"], "flaw_date-detected": "", "flaw_detected-by": "compiler", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2015-04-14 (01:37)", "flaw_reported-by": "contributor", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/648", "flaw_reproducibility": "always", "flaw_trace": "N/A", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": 63}]}, {"__class__": "tuple", "__value__": [{"id": 701, "title": "An error in physical robot specification", "type": "weakness", "description": "A Xacro file refers to wrong wrist of the robot, which results in a wrong physical model being used for simulation. A robotics application needs a description of the physical appearance, shape, etc. of the robot.  This is used, among others, by the simulation tools.  The robot descriptions are stored in URDF files, an XML format. Xacro files are URDF files enriched with macros, mostly for better code reuse (so that similar parts of the robot can be generated). This particular URDF file is specific to the Gazebo physics simulator.  It does not actually define the robot shape. It decorates a robot model from another file with properties specific to this simulation engine. The error seems to be minor. The color of the wrist might be wrong as a result (it is unclear whether the effect of gravity on this wrist will also be wrong, which could be problematic; or perhaps whether this wrist could disappear). The error appeared by copying and pasting, presumably during adapting a description of smaller variant of the same robot, for a bigger version. The file has been created on April 8, 2013.  The fix was committed on Jun 4, 2013. The repository in which this work has been done, seems to be deleted by now.  The bug was on 57 days, but it was fixed before merging into ros-industrial repositories.\n", "cwe": "Wrong Robot Model (no CWE) #PHYSICAL\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["xacro", "gazebo", "urdf", "driver"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://github.com/aliasrobotics/RVD/issues/701"], "flaw_phase": "runtime-operation", "flaw_specificity": "robotics", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/ur_description", "flaw_languages": "None", "flaw_date-detected": "", "flaw_detected-by": "developer", "flaw_detected-by-method": "N/A", "flaw_date-reported": "unreported", "flaw_reported-by": "unreported", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/701", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/7"}, {"id": 666, "title": "Missing polling of ros::ok prevents nodes from exiting gracefully when ROS shuts down", "type": "weakness", "description": "Two loops in Buffer::canTransform (the same problem in two overloaded versions) do not check the value of ros::ok() to detect whether the shutdown has not completed.  As a result the waitForTransform() function on tf listners would not shutdown if simulated time has been paused. This can have serious implications if the running node holds on to resources that make it impossible to, for instance, restart the system.\n", "cwe": "CWE-404: Improper Resource Shutdown or Release", "cve": "None", "keywords": ["C++", "shutdown", "SIGINT"], "system": "core component", "vendor": null, "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://answers.ros.org/question/182811/bug-or-intended-behaviour-transformlistenerwaitfortransform-does-not-poll-rosok/?answer=182844#post-id-182844", "http://wiki.ros.org/tf/Tutorials/tf%20and%20Time%20%28C%2B%2B%29", "https://github.com/aliasrobotics/RVD/issues/666"], "flaw_phase": "runtime-operation", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "generic task component", "flaw_package": "ros/geometry2/tf2_ros", "flaw_languages": ["C++"], "flaw_date-detected": "", "flaw_detected-by": "", "flaw_detected-by-method": "N/A", "flaw_date-reported": "Sep 17, 2013, 3:34 PM GMT +2", "flaw_reported-by": "contributor", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/666", "flaw_reproducibility": "sometimes", "flaw_trace": "FIXME: the first set up for the reproduction is given in the link above, in links.  But we will also likely need to cause a  SIGINT.\n", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros/geometry2/pull/85"}]}, {"__class__": "tuple", "__value__": [{"id": 681, "title": "parameter moved into namespace", "type": "weakness", "description": "MoveIt parameters have been reorganized. The parameters 'allowed_execution_duration_scaling' and 'allowed_goal_duration_margin' have been moved down in the hierarchy, under 'trajectory_execution'. This now produces warning during execution of launch files (so files that start ROS nodes), as assigned parameters no longer exist at top level.  The framework still assigns them but produces a warning, presumably because it will become less forgiving at some point. This is a bug that was caused by evolution of a data schema / language outside of the UR driver code.  Since the driver depends on this code, it needs to be updated to the new schema.  This is a fairly generic problem in software engineering, especially for XML-based languages, yet here it appears in a ROS-specific language (launch XML).\n", "cwe": "Undeclared Identifier (no CWE) #EVOLUTION\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["launch", "language evolution"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://github.com/aliasrobotics/RVD/issues/681"], "flaw_phase": "runtime-initialization", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform-code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-planning/moveit_ros/planning", "flaw_languages": ["launch XML"], "flaw_date-detected": "", "flaw_detected-by": "runtime detection", "flaw_detected-by-method": "N/A", "flaw_date-reported": "unreported", "flaw_reported-by": "", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/681", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/285"}, {"id": 647, "title": "SIA20D Mesh Arm Navigation Package not following naming conventions", "type": "weakness", "description": "The package name \"SIA20D_Mesh_arm_navigation\" does not follow the naming conventions. It should start with a lower case letter and only contain lower case letters, digits and underscores.\n", "cwe": "Naming Convention Violation (no CWE)", "cve": "None", "keywords": ["naming conventions", "catkin_make"], "system": "motoman", "vendor": null, "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://github.com/aliasrobotics/RVD/issues/647"], "flaw_phase": "compile-time", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "N/A", "flaw_package": "ros-industrial/motoman | ros-industrial/motoman/motoman_sia20d_support", "flaw_languages": ["XML"], "flaw_date-detected": "", "flaw_detected-by": "developer", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2013-08-02 (10:58)", "flaw_reported-by": "member developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/647", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": 15}]}, {"__class__": "tuple", "__value__": [{"id": 677, "title": "Driver locks without discovering that a trajectory has been realized or failed", "type": "weakness", "description": "The python driver is not detecting that a robot arm has reached a goal point of a trajectory planned.  It never sends an information that the final point has been reached and locks. The fix relies on distinguishing two situations: whether the robot got stuck due to planning errors, or whether it has reached the final destination (and the final location has been communicated). The deadlocks are intermittent, probably dependent on numerical proximity of the goal and the present position, or on timing.\n", "cwe": "CWE-440: Expected Behavior Violation #PHYSICAL\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["trajectory", "ur", "driver", "locked", "planning"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://github.com/aliasrobotics/RVD/issues/677"], "flaw_phase": "runtime-operation", "flaw_specificity": "robotics-specific", "flaw_architectural-location": "platform-code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/ur_driver", "flaw_languages": "None", "flaw_date-detected": "", "flaw_detected-by": "runtime detection", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2014-02-03 (23:23)", "flaw_reported-by": "member developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/677", "flaw_reproducibility": "sometimes", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/37"}, {"id": 656, "title": "Deprecated reference to files in sia5d package", "type": "weakness", "description": "The sia5d_support packages makes use of mesh files for robot visualization.  The meshes used in the robot description file sia5d_macro.xacro refers to the motoman_config package for this mesh files, which is deprecated.\n", "cwe": "CWE-477: Use of Obsolete Functions #EVOLUTION", "cve": "None", "keywords": ["xacro macro", "mesh", "robot description"], "system": "motoman", "vendor": null, "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://github.com/aliasrobotics/RVD/issues/656"], "flaw_phase": "runtime-initialization", "flaw_specificity": "general-issue", "flaw_architectural-location": "application-specific", "flaw_application": "industrial robot arm", "flaw_subsystem": "visualization", "flaw_package": "ros-industrial/motoman | ros-industrial/motoman/sia5d_support", "flaw_languages": ["XML"], "flaw_date-detected": "", "flaw_detected-by": "developer", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2016-02-15 (00:00)", "flaw_reported-by": "member developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/656", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": 94}]}], "match": [{"__class__": "tuple", "__value__": [{"id": 709, "title": "required C++11 compiler", "type": "weakness", "description": "The geometric_shapes package (from moveit) started to use C++11 features, more precisely the shared pointer type that clashes with a similar type in the Boost library.  The geometry shapes headers were updated to include a check if a C++11 compiler is used, and fail with an error otherwise. This issue could appear in any complex projects which mixes versions of the programming language (here C++).\n", "cwe": "Type error (no CWE) #EVOLUTION: CWE-439\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["C++11", "boost", "pointer", "header file"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://github.com/ros-industrial/universal_robot/pull/254", "https://github.com/ros-planning/geometric_shapes/blob/kinetic-devel/include/geometric_shapes/shapes.h", "https://discourse.ros.org/t/std-shared-ptr-in-the-geometric-shapes-public-api/395/10", "https://github.com/aliasrobotics/RVD/issues/709"], "flaw_phase": "compile-time", "flaw_specificity": "general issue", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/ur_kinematics", "flaw_languages": ["C++"], "flaw_date-detected": "", "flaw_detected-by": "compile-time", "flaw_detected-by-method": "N/A", "flaw_date-reported": "None", "flaw_reported-by": "", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/709", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/286"}, {"id": 666, "title": "Missing polling of ros::ok prevents nodes from exiting gracefully when ROS shuts down", "type": "weakness", "description": "Two loops in Buffer::canTransform (the same problem in two overloaded versions) do not check the value of ros::ok() to detect whether the shutdown has not completed.  As a result the waitForTransform() function on tf listners would not shutdown if simulated time has been paused. This can have serious implications if the running node holds on to resources that make it impossible to, for instance, restart the system.\n", "cwe": "CWE-404: Improper Resource Shutdown or Release", "cve": "None", "keywords": ["C++", "shutdown", "SIGINT"], "system": "core component", "vendor": null, "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://answers.ros.org/question/182811/bug-or-intended-behaviour-transformlistenerwaitfortransform-does-not-poll-rosok/?answer=182844#post-id-182844", "http://wiki.ros.org/tf/Tutorials/tf%20and%20Time%20%28C%2B%2B%29", "https://github.com/aliasrobotics/RVD/issues/666"], "flaw_phase": "runtime-operation", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "generic task component", "flaw_package": "ros/geometry2/tf2_ros", "flaw_languages": ["C++"], "flaw_date-detected": "", "flaw_detected-by": "", "flaw_detected-by-method": "N/A", "flaw_date-reported": "Sep 17, 2013, 3:34 PM GMT +2", "flaw_reported-by": "contributor", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/666", "flaw_reproducibility": "sometimes", "flaw_trace": "FIXME: the first set up for the reproduction is given in the link above, in links.  But we will also likely need to cause a  SIGINT.\n", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros/geometry2/pull/85"}]}, {"__class__": "tuple", "__value__": [{"id": 714, "title": "Specifications of dimensions of a robot arm are not reflecting real dimensions", "type": "weakness", "description": "URDF is an XML-based modeling language in which robot physical models are described. As robots are often produced in families of similar devices, it is convenient to parameterize this models. ROS uses the XACRO language to write parameterized models.  XACRO files are preprocessed to generate instantiated URDF files. In this particular case, a XACRO file contained physical dimensions of the UR10 robots that were inconsistent with those stored in the native software of Universal Robots (and also inconsistent with the documentation data). This means that the robot visualized in the visualization tool Rviz and used in simulation behaved differently than the real robot.  This poses an issue for testing and quality assurance. The issue is specific to ROS as it occurs in a ROS specific modeling language (URDF/XACRO).  However the same problem would naturally appear in any robotics framework, just in a different language. The discussion has started on the mailing list, and then have been promoted to the issue tracker, and referred from a larger pull requests that also improves other visual issues with URDF files, and reorganizes the files, so many aspects of the linked commit do not pertain to this bug. The same patch also fixes some potentially interesting issues with mass and inertia of the robot elements.\n", "cwe": "Wrong Robot Model (no CWE) #PHYSICAL\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["urdf", "xacro", "rviz", "driver"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://groups.google.com/forum/#!topic/swri-ros-pkg-dev/1e3A_1BTQWQ", "https://github.com/aliasrobotics/RVD/issues/714"], "flaw_phase": "runtime-operation", "flaw_specificity": "robotics", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/ur_description", "flaw_languages": "None", "flaw_date-detected": "", "flaw_detected-by": "developer", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2014-05-27 (15:40)", "flaw_reported-by": "member developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/714", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/82"}, {"id": 689, "title": "Specifications of dimensions of a robot arm are not reflecting real dimensions", "type": "weakness", "description": "URDF is an XML-based modeling language in which robot physical models are described. As robots are often produced in families of similar devices, it is convenient to parameterize this models. ROS uses the XACRO language to write parameterized models.  XACRO files are preprocessed to generate instantiated URDF files. In this particular case, a XACRO file contained physical dimensions of the UR10 robots that were inconsistent with those stored in the native software of Universal Robots (and also inconsistent with the documentation data). This means that the robot visualized in the visualization tool Rviz and used in simulation behaved differently than the real robot.  This poses an issue for testing and quality assurance. The issue is specific to ROS as it occurs in a ROS specific modeling language (URDF/XACRO).  However the same problem would naturally appear in any robotics framework, just in a different language. The discussion has started on the mailing list, and then have been promoted to the issue tracker, and referred from a larger pull requests that also improves other visual issues with URDF files, and reorganizes the files, so many aspects of the linked commit do not pertain to this bug. The same patch also fixes some potentially interesting issues with mass and inertia of the robot elements.\n", "cwe": "Wrong Robot Model (no CWE) #PHYSICAL\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["urdf", "xacro", "rviz", "driver"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://groups.google.com/forum/#!topic/swri-ros-pkg-dev/1e3A_1BTQWQ", "https://github.com/aliasrobotics/RVD/issues/689"], "flaw_phase": "runtime-operation", "flaw_specificity": "robotics", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/ur_description", "flaw_languages": "None", "flaw_date-detected": "", "flaw_detected-by": "developer", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2014-05-27 (15:40)", "flaw_reported-by": "member developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/689", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/82"}]}, {"__class__": "tuple", "__value__": [{"id": 657, "title": "Variable is assigned but never used", "type": "weakness", "description": "In the Motoman driver a variable 'bHasPreviousData' is set to different values, but it is never used in any case later.  It is used just in a line, which is at that moment in a commit.\n", "cwe": "CWE-563: Assignment to Variable without Use (Unused Variable)", "cve": "None", "keywords": ["driver", "motoman"], "system": "motoman", "vendor": null, "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://github.com/aliasrobotics/RVD/issues/657"], "flaw_phase": "compile-time", "flaw_specificity": "general-issue", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "N/A", "flaw_package": "ros-industrial/motoman/motoman_driver", "flaw_languages": ["C++"], "flaw_date-detected": "", "flaw_detected-by": "developer", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2016-12-21 (00:00)", "flaw_reported-by": "member developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/657", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": 140}, {"id": 636, "title": "Topic names not consistent between hardware and simulation", "type": "weakness", "description": "In ROS it is possible to work equivalent with hardware and simulation(in Gazebo).  A camera can be simulated in Gazebo with a plugin. This plugin has parameters which can be set in the URDF or Xacro. One parameter is e.g. the topic-name on which it publishes the image.  The real robot uses topic-names which are defined in the driver-node for the camera.  Therefore, one has to make sure to use consistent naming conventions to assure the exchangability between hardware and simulation.  In the example the camera topics in simulation do not match the topic names on real hardware.  The problem is solved by introducing consistent naming.\n", "cwe": "inconsistent naming", "cve": "None", "keywords": ["xacro", "gazebo", "topic", "name", "inconsistency"], "system": "care-o-bot", "vendor": null, "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://wiki.ros.org/xacro", "http://gazebosim.org/tutorials?tut=ros_gzplugins", "https://github.com/aliasrobotics/RVD/issues/636"], "flaw_phase": "runtime-operation", "flaw_specificity": "robotics-specific", "flaw_architectural-location": "application-specific", "flaw_application": "cob common", "flaw_subsystem": "robot description", "flaw_package": "cob_common", "flaw_languages": "xacro", "flaw_date-detected": "", "flaw_detected-by": "developer", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2015-11-04 (00:00)", "flaw_reported-by": "member developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/636", "flaw_reproducibility": "sometimes", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ipa320/cob_common/pull/179"}]}, {"__class__": "tuple", "__value__": [{"id": 716, "title": "Runtime dependencies missing in a Python driver module", "type": "weakness", "description": "The ur_driver package manifest (package.xml) lacks a runtime dependency on the python parser beatifulsoup.  As an effect the build and installation procedure does not install/require the right python package.  Since package loading is dynamic in python the dependency is only reported when one attempts to start the ur5 driver node. The package manifest is an XML file called package.xml that must be included with any catkin-compliant package's root folder. This file defines properties about the package such as the package name, version numbers, authors, maintainers, and dependencies on other catkin packages. (from ROS wiki) The patch contains also fix for build-time and run-time dependencies on trajectory_msgs package, which were also missing. The issue is ROS-specific as it appears in ROS-specific package.xml files.  However, the issue of missing runtime dependencies overall, is a general software-engineering issue.\n", "cwe": "run-time dependency issue (no CWE)\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["catkin", "package.xml"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://answers.ros.org/question/103191/in-ur5_driverdriverpy-importerror-no-module-named-beautifulsoup/", "http://www.pythonforbeginners.com/beautifulsoup/beautifulsoup-4-python", "http://wiki.ros.org/catkin/package.xml", "https://github.com/aliasrobotics/RVD/issues/716"], "flaw_phase": "runtime-initialization", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/ur_description", "flaw_languages": ["python"], "flaw_date-detected": "", "flaw_detected-by": "runtime detection", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2013-11-20 (00:00)", "flaw_reported-by": "member developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/716", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/30"}, {"id": 703, "title": "Syntax error in a robot script", "type": "weakness", "description": "The bug occurs in the code running on the robot that is uploaded there by ROS.  This code is written in a prioprietary language URScript. The entire program (ur_driver/prog) consists of one top-level function 'driverProg'.  After this program, there was one toplevel call to this function, which was not required (indeed not allowed) by the syntax of URScript.  The language's semantics by default performs this call to the only existing function upon function definition. The parser for URScript produces a parsing error, but the language is permissive and the program continuous to execute as if the line was not there.  Thus the impact on the execution of the robot is negligible (just a message). This is an encoding error in the sense that the program sent to UR robot is incorrect sytnactically (so this is analogous to sending any other malformed message), but note that this program is not synthesized by the driver, but coded statically. Malformed script execution in a dynamic interpreted language is a general software defect that could appear in many other languages.\n", "cwe": "CWE-172: Encoding Error\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["URScript", "syntax error"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://github.com/aliasrobotics/RVD/issues/703"], "flaw_phase": "runtime-initialization", "flaw_specificity": "general issue", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/ur_driver", "flaw_languages": ["URScript"], "flaw_date-detected": "", "flaw_detected-by": "compiler", "flaw_detected-by-method": "N/A", "flaw_date-reported": "None", "flaw_reported-by": "contributor", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/703", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/165"}]}, {"__class__": "tuple", "__value__": [{"id": 720, "title": "Controller reads too many bytes for IO message", "type": "weakness", "description": "The controller reads more from the socket than the size of the message. This is not always a problem, as often messages are processed one a time, and there is nothing more available to read.  However in many-message scenarios (like executing a trajectory) this leads to errors, as remaining messages are read with an offset (incomplete gibberish). The bug occurs in the code running on the robot that is uploaded there by ROS.  This code is written in a prioprietary language URScript. The bug appears in universal-robot-specific language, but overreading is a standard issue, that could be seen in many software systems. The first pull request was closed without merging, but a large (the second) pull request included the same change.\n", "cwe": "CWE-805: Buffer Access with Incorrect Length Value\ninternal classification (cause):\ninternal classification (effect):\n", "cve": "None", "keywords": ["socket", "message", "urscript"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["https://github.com/aliasrobotics/RVD/issues/720"], "flaw_phase": "runtime-operation", "flaw_specificity": "general-issue", "flaw_architectural-location": "platform-code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/ur_driver", "flaw_languages": ["URScript"], "flaw_date-detected": "", "flaw_detected-by": "developer", "flaw_detected-by-method": "N/A", "flaw_date-reported": "2014-09-12 (12:16)", "flaw_reported-by": "member developer", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/720", "flaw_reproducibility": "sometimes", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/115 | https://github.com/ros-industrial/universal_robot/pull/117"}, {"id": 717, "title": "Missing runtime dependency on message definitions", "type": "weakness", "description": "ROS uses channels (known as 'topics') for communication.  Each topic is typed by a format of the messages it can carry. Messages are defined in a .msg file (.msg is essentially a super simple data-definition-langage (DDL)).  Implementations of messages are generated from msg files at compile time and then used at runtime to serialize and deserialize messages for communication. Meta-packages in ROS are used to install a number of packages working together (and having actual contents) to be conveniently installed together, while tracking all dependencies. The definition of runtime dependencies in the manifest (package.xml) file of universal_robot meta-package misses the runtime dependency on the ur_msgs package, which means that python programs trying to send or receive messages will crash. The issue is ROS-specific as it appears in ROS-specific package.xml files.  However, the issue of missing runtime dependencies overall, is a general software-engineering issue. The first pull request linked has not been merged, but a larger pull request has been merged that contain the fix. This is why we link two PRs. This bug also affects statically compiled languages (not only python), because format 1 of package.xml uses runtime dependencies both to specify actual runtime dependencies and dependencies that are needed to build the referring package (build dependencies are reserved for dependencies needed to build the referred package). This is explained in the REP, in the second link below.\n", "cwe": "run-time dependency issue (no CWE) internal classification (cause): internal classification (effect):\n", "cve": "None", "keywords": ["package.xml", "catkin"], "system": "universal_robot", "vendor": "Universal Robots", "severity_rvss-score": 0, "severity_rvss-vector": "", "severity_severity-description": "", "severity_cvss-score": 0, "severity_cvss-vector": "", "links": ["http://wiki.ros.org/catkin/package.xml", "http://www.ros.org/reps/rep-0140.html#rationale", "https://github.com/aliasrobotics/RVD/issues/717"], "flaw_phase": "runtime-initialization", "flaw_specificity": "ROS-specific", "flaw_architectural-location": "platform code", "flaw_application": "N/A", "flaw_subsystem": "driver", "flaw_package": "ros-industrial/universal_robot/universal_robot", "flaw_languages": ["python"], "flaw_date-detected": "", "flaw_detected-by": "runtime detection", "flaw_detected-by-method": "N/A", "flaw_date-reported": "unreported", "flaw_reported-by": "unreported", "flaw_reported-by-relationship": "N/A", "flaw_issue": "https://github.com/aliasrobotics/RVD/issues/717", "flaw_reproducibility": "always", "flaw_trace": "", "flaw_reproduction": "", "flaw_reproduction-image": "", "exploitation_description": "", "exploitation_exploitation-image": "", "exploitation_exploitation-vector": "", "mitigation_description": "", "mitigation_pull-request": "https://github.com/ros-industrial/universal_robot/pull/100 | https://github.com/ros-industrial/universal_robot/pull/130"}]}]}